---
swagger: "2.0"
info:
  version: "1.0"
  title: "urlShortenPipeline"
host: "leichen.xyz"
schemes:
- "https"
paths:
  /:
    get:
      consumes:
      - "application/json"
      produces:
      - "text/html"
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'text/html'"
            responseTemplates:
              text/html: "<html>\n  <head>\n    <title>Tiny URL Shortener</title>\n\
                \    <style>\n    body {\n        padding: 50px;\n    }\n    .url-input,\
                \ .url-output{\n        width: 100%;\n        padding: 10px;\n   \
                \ }\n    .submit-button {\n        color: #fff;\n        background-color:\
                \ #0275d8;\n        border-color: #0275d8;\n        border-radius:\
                \ 4px;\n        font-size: 18px;\n        line-height: 30px;\n   \
                \     margin-bottom: 20px;\n    }\n    </style>\n    <script>\n  \
                \    const WRITE_PREFIX = ''\n\n      window.shorten = function(event)\
                \ {\n        event.preventDefault();\n        urlInput = document.getElementsByClassName('url-input')[0]\n\
                \        urllink = document.getElementById('url-link')\n        urllinktext\
                \ = document.getElementById('url-link-text')\n        urlOutput =\
                \ document.getElementsByClassName('url-output')[0]\n        fetch(WRITE_PREFIX,\
                \ { body: JSON.stringify({ url: urlInput.value }), method: 'POST'\
                \ })\n        .then((response) => response.json())\n        .then((data)\
                \ => {\n          urlOutput.value = data.body;\n          urllink.href\
                \ = data.body;\n          urllinktext.innerHTML = data.body;\n   \
                \       urlOutput.focus();\n        });\n      }\n    </script>\n\
                \  </head>\n  <body>\n    <h1>Tiny Url-Shortener</h1>\n    <h2>A serverless\
                \ web project based on AWS Lambda + API Gateway + DynamoDB.</h2>\n\
                \    <p>Details and writeup at <a href='https://github.com/3rd-stone/AWS-url-shorten-serverless-application-pipeline'>github</a></p>\n\
                \    <form id='shorten-form'>\n      <div>\n        <label>URL:</label>\n\
                \        <input name='url' class='url-input' placeholder='Paste link\
                \ here'></input>\n      </div>\n      <div>\n      <button class='submit-button'\
                \ onclick='shorten(event)'>shorten</button>\n      </div>      \n\
                \      <div>\n        <label>Tiny URL:</label>\n        <a id='url-link'\
                \ href=''><p id='url-link-text'></p></a>\n        <input name='url-out'\
                \ class='url-output'></input>\n      </div>\n    </form>\n  </body>\n\
                </html>"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
    post:
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007325904473:function:urlShortenPipeline-urlshorten-PU4XF5ANQUFK/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    x-amazon-apigateway-any-method:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        405:
          description: "405 response"
          headers:
            Content-Type:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "405"
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"message\"\
                \ : \"Method Not Allowed\"\n}"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /{proxy+}:
    x-amazon-apigateway-any-method:
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:007325904473:function:urlShortenPipeline-urlshorten-PU4XF5ANQUFK/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
